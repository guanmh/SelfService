<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--你接口的包名是com.abc.dao,接口名是NameMapper.java，那么你的mapper.xml的namespace应该是com.abc.dao.NameMapper-->
<mapper namespace="com.gmh.mapper.common.UserMapper">
    <resultMap id="BaseResultMap" type="com.gmh.entity.common.User">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="is_cancel" jdbcType="BIT" property="cancel"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
        <result column="login_password" jdbcType="VARCHAR" property="loginPassword"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <collection column="roleId" property="roles"
                    ofType="com.gmh.entity.common.Role">
            <id column="roleId" property="id"/>
            <result column="roleName" property="name"/>
            <result column="rolePower" property="power"/>
        </collection>
    </resultMap>

    <select id="loginUser" parameterType="string" resultMap="BaseResultMap">
       SELECT
        sys_user.id,
        sys_user.is_cancel,
        sys_user.create_time,
        sys_user.login_name,
        sys_user.login_password,
        sys_user.`name`,
        sys_user.phone,
        sys_user.email,
        sys_role.id AS roleId,
        sys_role.`name` AS roleName,
        sys_role.power AS rolePower
        FROM
        sys_user
        LEFT JOIN sys_user_role ON sys_user_role.user_id = sys_user.id
        LEFT JOIN sys_role ON sys_user_role.role_id = sys_role.id AND sys_role.is_cancel = 0
        WHERE
        sys_user.is_cancel = 0 AND sys_user.login_name=#{name}
    </select>
    <select id="pageUser" resultType="java.util.Map">
        SELECT
        c_user.id,
        c_user.login_name AS loginName,
        c_user.`name`,
        c_user.phone,
        c_user.email,
        b_company.`name` AS area,
        group_concat( c_role.`name` ) AS roleName,
        group_concat(distinct c_organization.`name` order by c_organization.`id` ASC) AS orgName
        FROM
        c_user
        LEFT JOIN b_company ON c_user.company_id = b_company.id
        LEFT JOIN c_user_role ON c_user_role.user_id = c_user.id
        LEFT JOIN c_role ON c_user_role.role_id = c_role.id
        LEFT JOIN c_organization ON c_role.organization_id = c_organization.id
        <where>
            c_user.is_cancel = 0
            <if test="name!=null">
                and c_user.`name` like concat('%',concat(#{name},'%'))
            </if>
            <if test="roleIds!=null">
                and c_role.id in
                <foreach collection="roleIds" item="id"
                         open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
            <if test="phone!=null">
                and c_user.phone like concat('%',concat(#{phone},'%'))
            </if>

            <if test="generic!=null">
                and (
                c_user.`name` like concat('%',concat(#{generic},'%'))
                or c_user.login_name like concat('%',concat(#{generic},'%'))
                or c_user.phone like concat('%',concat(#{generic},'%'))
                )
            </if>
        </where>
        GROUP BY
        c_user.id,
        c_user.login_name,
        c_user.`name`,
        c_user.phone,
        b_company.`name`,
        c_user.email
        ORDER BY
        c_user.`id` Desc
    </select>
    <select id="get" resultMap="BaseResultMap">
        SELECT
        c_user.id,
        c_user.is_cancel,
        c_user.create_time,
        c_user.email,
        c_user.login_name,
        c_user.login_password,
        c_user.`name`,
        c_user.phone,
        c_user.user_type,
        c_user.company_id,
        c_role.id AS roleId,
        c_role.`name` AS roleName,
        b_company.`name` AS company_name
        FROM
        c_user
        LEFT JOIN c_user_role ON c_user_role.user_id = c_user.id
        LEFT JOIN c_role ON c_user_role.role_id = c_role.id
        LEFT JOIN b_company ON c_user.company_id = b_company.id
        where c_user.id = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.gmh.entity.common.User">
        insert into sys_user (
          email, login_name, login_password,
          name, phone)
        values (
          #{email,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, #{loginPassword,jdbcType=VARCHAR},
          #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR})
      </insert>
    <update id="updateByPrimaryKey" parameterType="com.gmh.entity.common.User">
        update c_user
        set
        email = #{email,jdbcType=VARCHAR},
        login_name = #{loginName,jdbcType=VARCHAR},
        login_password = #{loginPassword,jdbcType=VARCHAR},
        name = #{name,jdbcType=VARCHAR},
        phone = #{phone,jdbcType=VARCHAR},
        user_type = #{userType,jdbcType=INTEGER},
        company_id = #{company.id,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="queryByAccountName" resultMap="BaseResultMap">
        SELECT
        c_user.id,
        c_user.is_cancel,
        c_user.create_time,
        c_user.email,
        c_user.login_name,
        c_user.login_password,
        c_user.`name`,
        c_user.phone,
        c_user.user_type,
        c_user.company_id,
        c_role.id AS roleId,
        c_role.`name` AS roleName,
        b_company.`name` AS company_name
        FROM
        c_user
        LEFT JOIN c_user_role ON c_user_role.user_id = c_user.id
        LEFT JOIN c_role ON c_user_role.role_id = c_role.id
        LEFT JOIN b_company ON c_user.company_id = b_company.id
        where c_user.login_name in
        <foreach collection="accountNames" open="(" close=")" separator="," item="an">
            #{an,jdbcType=VARCHAR}
        </foreach>
    </select>
    <select id="queryByRoleCodes" resultType="java.lang.Long">
        SELECT DISTINCT
        c_user.id
        FROM
        c_user
        INNER JOIN c_user_role ON c_user_role.user_id = c_user.id
        INNER JOIN c_role ON c_user_role.role_id = c_role.id
        WHERE
        c_user.company_id = #{companyId,jdbcType=BIGINT} AND
        c_role.power
        <foreach collection="codes" open="in (" close=")" separator="," item="code">
            #{code,jdbcType=VARCHAR}
        </foreach>
    </select>
</mapper>
